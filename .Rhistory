Age
Income
ls()
mean(Age)
mean(Income)
mean(dataSet)
mean(dataset)
sd(Age)
sd(Income)
sd(dataSet)
sd(DATAVAR)
sd(ls())
ls()
range(Age)
median(Age)
mode(Age)
min(Age)
max(age)
max(Age)
quantile(Age, c(0.25, 0.75))
quantile(Age, c(0.25, 0.25, 0.25, 0.25))
quantile(Age, c(0.25, 0.25, 0.25, 0.77))
quantile(Age, c(0.25, 0.55, 0.75))
quantile(Age, c(0.25, 0.55, 0.75, 0.9))
quantile(Age)
fomula:length(VAR[VAR <>
fomula:length(VAR[VAR <>])
length(Age[Age <= 45])/length(Age) * 100
summary(Age)
summary(dataSet)
read.csv("~/Downloads/dataset_readingTests.csv") -> data
data
summary(data)
attach(data)
summary(Subject)
plot(PRE1, POST1)
plot(data)
plot(PRE1, POST1, xlim = c(0, 20), ylim = c(0, 20), main = "Posttest1 on Pretet1", sub = "A Scattered Tale", xlab = "Pretest 1 score", ylab = "Posttest 1 Score")
plot(PRE1, POST1, xlim = c(0, 20), ylim = c(0, 20), main = "Posttest 1 on Pretest 1", sub = "A Scattered Tale", xlab = "Pretest 1 Score", ylab = "Posttest 1 Score", col = c("dark green", "red", "orange"), pch = c(21, 22, 23), cex = 3, lty = "solid", lwd = 3)
read.csv("~/Downloads/dataset_readingTests2.csv") -> data
summary(data)
core(PRE1, POST1)
cor(PRE1, POST1)
cor(date)
cor(data)
read.csv("~/Downloads/dataset_enrollmentForecast.csv") -> data2
summary(data2)
read.csv("~/Downloads/dataset_enrollmentForecast.csv") -> data
summary(data)
attach(data)
linearModelVar <- lm(ROLL ~ UNEM, data)
linearModelVar
summary(linearModelVar)
read.csv("~/Downloads/dataset_enrollmentForecast.csv") -> dataSet
attach(dataSet)
summary(dataSet)
twoPredictorModel <- lm(ROLL ~ UNEM + HGRAD, dataSet)
twoPredictorModel
threePredictorModel <- lm(ROLL ~ UNEM + HGRAD + INC, dataSet)
threePredictorModel
summary(threePredictorModel)
linearModelVar <- lm(ROLL ~ UNEM, dataSet)
unstandPredict <- predict(linearModelVar)
unstandRes <- resid(linearModelVar)
standPredict <- (unstandPredict - mean(unstandPredict)) / sd(unstandPredict)
standResid <- (unstandRes - mean(unstandRes)) / sd(unstandRes)
plot(standPredict, standResid, main = "Stand Resids Plog", xlab = "StandPredictVals", ylab = "StandRes")
abline(0,0)
hist(standResid, freq=FALSE)
curve(dnorm, add = TRUE)
probDist <- pnorm(standResid)
plot(ppoints(length(standResid)), sort(probDist), main = "PP Plot", xlab - "Observed Probability", ylab = "Expeted Prob")
abline(0, 1)
plot(ppoints(length(standResid)), sort(probDist), main = "PP Plot", xlab = "Observed Probability", ylab = "Expeted Prob")
abline(0, 1)
read.csv("~/Downloads/dataset_iceCreamConsumption.csv") -> data
summar(data)
summary(data)
attach(data)
dataSet <- 0
atatach(data)
attach(data)
attach(dataSet)
INC
summar(data)
summary(data)
mean(INC)
PRICEc <- PRICE - mean(PRICE)
INCc <- INC - mean(INC)
PRICEINCi <- PRICEc * INCc
interactionModel <- lm(CONSUME ~ PRICE + INC + TEMP + PRICEINCi, data)
summary(interactionModel)
read.csv("~/Downloads/dataset_nflQbSalary.csv")
read.csv("~/Downloads/dataset_nflQbSalary.csv") -> dataVar
summary(dataVar)
attach(dataVar)
dCONF <- as.numeric(CONF) - 1
plot(CONF, TOTAL, main="Team Salary by Conference", xlab="Conference", ylav="Salary")
plot(CONF, TOTAL, main="Team Salary by Conference", xlab="Conference", ylab="Salary")
mean(dCONF)
sd(dCONF)
cor(dCONF, TOTAL)
linearModel <- lm(TOTAL ~ QB + dCONF, dataVar)
summary(linearModel)
summary(dataVar)
read.csv("~/Downloads/dataset_practiceFinal.csv") -> dataVar
summary(dataVar)
attach(dataVar)
mean(Practice)
FinalC <- Final - mean(Final)
PracticeC <- Practice- mean(Practice)
PracticeC2 <- PracticeC * PracticeC
PracticeC3 <- PracticeC * PracticeC * PracticeC
linearModel <- lm(FinalC ~ PracticeC, dataVar)
quadraticModel <- lm(FinalC ~ PracticeC + PracticeC2, dataVar)
cubicModel <- lm(FinalC ~ PracticeC + PracticeC2 + PracticeC3, dataVar)
anova(linearModel, quadraticModel, cubicModel)
read.csv("~/Downloads/dataset_enrollmentForecast (1).csv") -> dataVar
summary(dataVar)
attach(dataVar)
YEAR
onePredictorModel <- lm(ROLL ~ UNEM, dataVar)
twoPredictorModel <- lm(ROLL ~ UNEM + HGRAD, dataVar)
threePredictorModel <- lm(ROLL ~ UNEM + HGRAD + INC, dataVar)
anova(onePredictorModel, twoPredictorModel, threePredictorModel)
load("~/Documents/workspace/R/.RData")
mean(10, 10)
install.packages(manipulate)
install.packages("manipulate")
install.packages("ggplot2")
install.packages("manipulate")
library("ggplot2")
library("manipulate")
sine
sine.f.xx <- function (dt, Xt, Ex) {}
sine.f.xx <- function (dt, Xt, Ex) {
nXt <- c(
Xt[1] + dt*Xt[2] + Ex[1],
Xt[2] + Ex[2],
Xt[3] + Ex[3],
Xt[4] + Ex[4])
nXt}
sine.f.xy <- function (dt, Xt, Ey) {
y <- Xt[3] * sin(Xt[1] / pi) + Ey[1]
as.matrix(y)
}
series.r <- sappl (1:500, function(x) (1+x/500) * sin(16 * x/500 * pi)) + rnorm(500, sd=0.25)
series.r <- sapply (1:500, function(x) (1+x/500) * sin(16 * x/500 * pi)) + rnorm(500, sd=0.25)
summary(series.r)
## modified number of columns
ncols <- function (x) ifselse(is.matrix(x), ncol(x), length(x))
## modified number of rows
nrows <- function (x) ifelse(is.matrix(x), nrow(x), length(x))
#
#    Determine transformed distribution across non-linear function f(x)
#
#
unscented.transform.aug <- function (
MUx,				# mean of state
P, 					# covariance of state
Nyy,				# noise covariance matrix of f(x)
f,					# non-linear function f(X, E)
dt,					# time increment
alpha = 1e-3,		# scaling of points from mean
beta = 2,			# distribution parameter
kappa = 1)
{
Nyy <- as.matrix(Nyy)
## constants
Lx <- nrows(MUx)
Ly <- nrows(Nyy)
n <- Lx + Ly
## create augmented mean and covariance
MUx.aug <- c (MUx, rep(0, Ly))
P.aug <- matrix(0, Lx+Ly, Lx+Ly)
P.aug[1:Lx,1:Lx] <- P
P.aug[(Lx+1):(Lx+Ly),(Lx+1):(Ly+Ly)] <- Nyy
## generating sigma points
lambda <- alpha^2 * (n + kappa) - n
A <- t (chol (P.aug))
X <- MUx.aug + sqrt(n + lambda) * cbind (rep(0,n), A, -A)
## generate weights
Wc <- c (
lambda / (n + lambda) + (1 - alpha^2 + beta),
rep (1 / (2 * (n + lambda)), 2*n))
Wm <- c (
lambda / (n + lambda),
rep (1 / (2 * (n + lambda)), 2*n))
## propagate through function
Y <- apply(X, 2, function (v)
{
f (dt, v[1:Lx], v[(Lx+1):(Lx+Ly)])
})
if (is.vector(Y))
Y <- t(as.matrix(Y))
## now calculate moments
MUy <- Y %*% Wm
Pyy <- matrix(0, nrows(Nyy), nrows(Nyy))
Pxy <- matrix(0, nrows(MUx), nrows(Nyy))
for (i in 1:ncols(Y))
{
dy <- (Y[,i] - MUy)
dx <- (X[1:Lx,i] - MUx)
Pyy <- Pyy + Wc[i] * dy %*% t(dy)
Pxy <- Pxy + Wc[i] * dx %*% t(dy)
}
list (mu = MUy, Pyy = Pyy, Pxy = Pxy)
}
#
#    Augmented UKF filtered series
#		- note that f and g are functions of state X and error vector N  f(dt, Xt, E)
#		- Nx and Ny state and observation innovation covariance
#		- Xo is the initial state
#		- dt is the time step
#
ukf.aug <- function (
series,
f,
g,
Nx,
Ny,
Xo = rep(0, nrow(Nx)),
dt = 1,
alpha = 1e-3,
kappa = 1,
beta = 2)
{
data <- as.matrix(coredata(series))
## description of initial distribution of X
oMUx <- Xo
oPx <- diag(rep(1e-4, nrows(Xo)))
Yhat <- NULL
Xhat <- NULL
for (i in 1:nrow(data))
{
Yt <- t(data[i,])
## predict
r <- unscented.transform.aug (oMUx, oPx, Nx, f, dt, alpha=alpha, beta=beta, kappa=kappa)
pMUx <- r$mu
pPx <- r$Pyy
## update
r <- unscented.transform.aug (pMUx, pPx, Ny, g, dt, alpha=alpha, beta=beta, kappa=kappa)
MUy <- r$mu
Pyy <- r$Pyy
Pxy <- r$Pxy
K <- Pxy %*% inv(Pyy)
MUx = pMUx + K %*% (Yt - MUy)
Px <- pPx - K %*% Pyy %*% t(K)
## set for next cycle
oMUx <- MUx
oPx <- Px
## append results
Yhat <- rbind(Yhat, t(MUy))
Xhat <- rbind(Xhat, t(MUx))
}
list (Yhat = Yhat, Xhat = Xhat)
}
u <- ukf.aug (series.r, sine.f.xx, sine.f.xy, Nx = 1e-3 * diag(c(1/3, 1, 1/10, 1/10)), Ny = 1, Xo = c(0.10, 0.10, 1, 1e-3), alpha=1e-2)
coredata
library(xts)
u <- ukf.aug (series.r, sine.f.xx, sine.f.xy, Nx = 1e-3 * diag(c(1/3, 1, 1/10, 1/10)), Ny = 1, Xo = c(0.10, 0.10, 1, 1e-3), alpha=1e-2)
ncols <- function (x) ifselse(is.matrix(x), ncol(x), length(x))
u <- ukf.aug (series.r, sine.f.xx, sine.f.xy, Nx = 1e-3 * diag(c(1/3, 1, 1/10, 1/10)), Ny = 1, Xo = c(0.10, 0.10, 1, 1e-3), alpha=1e-2)
data <- rbind (
)
source('~/Documents/workspace/R/UTFSmoother.R')
library(inv)
library()
source('~/Documents/workspace/R/UTFSmoother.R')
library(Matrix)
source('~/Documents/workspace/R/UTFSmoother.R')
source('~/Documents/workspace/R/UTFSmoother.R')
source('~/Documents/workspace/R/UTFSmoother.R')
library(MASS)
source('~/Documents/workspace/R/UTFSmoother.R')
source('~/Documents/workspace/R/UTFSmoother.R')
source('~/.active-rstudio-document')
library(quantmod)
install.packages('quantmod')
source('~/Documents/workspace/R/UTFSmoother.R')
source('~/Documents/workspace/R/UTFSmoother.R')
source('~/Documents/workspace/R/UTFSmoother.R')
ggplot() + geom_line(aes(x=t,y=y, colour=type), data) + facet_grid(window ~ ., scales="free_y", heights=c(3,2))
u <- ukf.aug (
series.r, sine.f.xx, sine.f.xy,
Nx = 1e-3 * diag(c(1/3, 1, 1/10, 1/10)),
Ny = 1,
Xo = c(0.10, 0.10, 1, 1e-3), alpha=1e-2)
data <- rbind (
data.frame(t = 1:500, y=series.r, type='raw', window='Price'),
data.frame(t = 1:500, y=u$Yhat, type='filtered', window='Price'),
data.frame(t = 1:500, y=u$Xhat[,3], type='amp', window='Params'))
ggplot() + geom_line(aes(x=t,y=y, colour=type), data) + facet_grid(window ~ ., scales="free_y", heights=c(3,1))
## smoothed test
u <- ukf.smooth (
series.r, sine.f.xx, sine.f.xy,
Nx = 1e-3 * diag(c(1/3, 1, 1/10, 1/10)),
Ny = 1,
Xo = c(0.10, 0.10, 1, 1e-3), alpha=1e-2)
data <- rbind (
data.frame(t = 1:500, y=series.r, type='raw', window='Price'),
data.frame(t = 1:500, y=u$Yhat, type='filtered', window='Price'),
data.frame(t = 1:500, y=u$Xhat[,3], type='amp', window='Params'))
ggplot() + geom_line(aes(x=t,y=y, colour=type), data) + facet_grid(window ~ ., scales="free_y", heights=c(3,2))
## unsmoothed test
u <- ukf.aug (
series.r, sine.f.xx, sine.f.xy,
Nx = 1e-3 * diag(c(1/3, 1, 1/10, 1/10)),
Ny = 1,
Xo = c(0.10, 0.10, 1, 1e-3), alpha=1e-2)
data <- rbind (
data.frame(t = 1:500, y=series.r, type='raw', window='Price'),
data.frame(t = 1:500, y=u$Yhat, type='filtered', window='Price'),
data.frame(t = 1:500, y=u$Xhat[,3], type='amp', window='Params'))
ggplot() + geom_line(aes(x=t,y=y, colour=type), data) + facet_grid(window ~ ., scales="free_y", heights=c(3,1))
source('~/Documents/workspace/R/UTFSmoother.R')
## smoothed test
u <- ukf.smooth (
series.r, sine.f.xx, sine.f.xy,
Nx = 1e-3 * diag(c(1/3, 1, 1/10, 1/10)),
Ny = 1,
Xo = c(0.10, 0.10, 1, 1e-3), alpha=1e-2)
data <- rbind (
data.frame(t = 1:500, y=series.r, type='raw', window='Price'),
data.frame(t = 1:500, y=u$Yhat, type='filtered', window='Price'),
data.frame(t = 1:500, y=u$Xhat[,3], type='amp', window='Params'))
ggplot() + geom_line(aes(x=t,y=y, colour=type), data) + facet_grid(window ~ ., scales="free_y", heights=c(3,2))
source('~/Documents/workspace/R/UTFSmoother.R')
ggplot() + geom_line(aes(x=t,y=y, colour=type), data) + facet_grid(window ~ ., scales="free_y", heights=c(3,2))
ggplot() + geom_line(aes(x=t,y=y, colour=type), data) + facet_grid(window ~ ., scales="free_y", heights=c(3,1))
u <- ukf.smooth (
series.r, sine.f.xx, sine.f.xy,
Nx = 1e-3 * diag(c(1/3, 1, 1/10, 1/10)),
Ny = 1,
Xo = c(0.10, 0.10, 1, 1e-3), alpha=1e-2)
data <- rbind (
data.frame(t = 1:500, y=series.r, type='raw', window='Price'),
data.frame(t = 1:500, y=u$Yhat, type='filtered', window='Price'),
data.frame(t = 1:500, y=u$Xhat[,3], type='amp', window='Params'))
ggplot() + geom_line(aes(x=t,y=y, colour=type), data) + facet_grid(window ~ ., scales="free_y", heights=c(3,2))
## unsmoothed test
u <- ukf.aug (
series.r, sine.f.xx, sine.f.xy,
Nx = 1e-3 * diag(c(1/3, 1, 1/10, 1/10)),
Ny = 1,
Xo = c(0.10, 0.10, 1, 1e-3), alpha=1e-2)
data <- rbind (
data.frame(t = 1:500, y=series.r, type='raw', window='Price'),
data.frame(t = 1:500, y=u$Yhat, type='filtered', window='Price'),
data.frame(t = 1:500, y=u$Xhat[,3], type='amp', window='Params'))
ggplot() + geom_line(aes(x=t,y=y, colour=type), data) + facet_grid(window ~ ., scales="free_y", heights=c(3,1))
install.packages(c("quantstrat","blotter","FinancialInstrument"), repos="http://r-forge.r-project.org")
source('~/.active-rstudio-document')
install.packages("PerformanceAnalytics")
source('~/.active-rstudio-document')
source('~/Documents/workspace/R/UTFSmoother.R')
## unsmoothed test
u <- ukf.aug (
series.r, sine.f.xx, sine.f.xy,
Nx = 1e-3 * diag(c(1/3, 1, 1/10, 1/10)),
Ny = 1,
Xo = c(0.10, 0.10, 1, 1e-3), alpha=1e-2)
data <- rbind (
data.frame(t = 1:500, y=series.r, type='raw', window='Price'),
data.frame(t = 1:500, y=u$Yhat, type='filtered', window='Price'),
data.frame(t = 1:500, y=u$Xhat[,3], type='amp', window='Params'))
ggplot() + geom_line(aes(x=t,y=y, colour=type), data) + facet_grid(window ~ ., scales="free_y", heights=c(3,1))
## smoothed test
u <- ukf.smooth (
series.r, sine.f.xx, sine.f.xy,
Nx = 1e-3 * diag(c(1/3, 1, 1/10, 1/10)),
Ny = 1,
Xo = c(0.10, 0.10, 1, 1e-3), alpha=1e-2)
data <- rbind (
data.frame(t = 1:500, y=series.r, type='raw', window='Price'),
data.frame(t = 1:500, y=u$Yhat, type='filtered', window='Price'),
data.frame(t = 1:500, y=u$Xhat[,3], type='amp', window='Params'))
ggplot() + geom_line(aes(x=t,y=y, colour=type), data) + facet_grid(window ~ ., scales="free_y", heights=c(3,2))
source('~/Documents/workspace/R/UTFSmoother.R')
## smoothed test
u <- ukf.smooth (
series.r, sine.f.xx, sine.f.xy,
Nx = 1e-3 * diag(c(1/3, 1, 1/10, 1/10)),
Ny = 1,
Xo = c(0.10, 0.10, 1, 1e-3), alpha=1e-2)
data <- rbind (
data.frame(t = 1:500, y=series.r, type='raw', window='Price'),
data.frame(t = 1:500, y=u$Yhat, type='filtered', window='Price'),
data.frame(t = 1:500, y=u$Xhat[,3], type='amp', window='Params'))
ggplot() + geom_line(aes(x=t,y=y, colour=type), data) + facet_grid(window ~ ., scales="free_y", heights=c(3,2))
source('~/Documents/workspace/R/UTFSmoother.R')
## unsmoothed test
u <- ukf.aug (
series.r, sine.f.xx, sine.f.xy,
Nx = 1e-3 * diag(c(1/3, 1, 1/10, 1/10)),
Ny = 1,
Xo = c(0.10, 0.10, 1, 1e-3), alpha=1e-2)
data <- rbind (
data.frame(t = 1:500, y=series.r, type='raw', window='Price'),
data.frame(t = 1:500, y=u$Yhat, type='filtered', window='Price'),
data.frame(t = 1:500, y=u$Xhat[,3], type='amp', window='Params'))
ggplot() + geom_line(aes(x=t,y=y, colour=type), data) + facet_grid(window ~ ., scales="free_y", heights=c(3,1))
ff_data <- read.table("~/Downloads/ffdata.csv")
ff_data <- read.table("~/Downloads/ffdata.csv", header=TRUE,sep=",")
r_data <- read.csv("~/Downloads/ffdata.csv")
r_data
summary(r_data)
attach(r_data)
rmrf <- Mkt.RF / 100
rmrf
smb <- SMB / 100
summary (r_data)
hml <- HML /100
rf = RF / 100
fund = FMAGX / 100
rf <- RF / 100
fund <- FMAGX / 100
fund.xcess <- fund - rf
ffreg <- lm(fund.xcess ~ rmrf + smb + hml)
summary(ffreg)
12 * 0.0029
library(twitteR)
install.packages("twitteR")
library(twitteR)
delta.tweets = searchTwitter('@delta', n=1500)
length(delta.tweets)
summary(delta.tweets)
class(delta.tweets)
class(delta)
delta.text = laply(delta.tweets, function(t) t$getText())
library(plyr)
delta.text = laply(delta.tweets, function(t) t$getText())
length(delta.text)
head(delta.text, 5)
data <- data.fram(text = delta.text, tweets = delta.tweets)
data <- data.frame(text = delta.text, tweets = delta.tweets)
ls()
getwd()
ll
ll()
setwd(getwd() + "/test")
getwd() + "test"
getwd() & "test"
paste(getwd(), "test")
paste(getwd(), "/test")
setwd(paste(getwd() + "/test"))
setwd(paste(getwd(), "/test"))
paste("test", "test")
paste("test", "test", sep="")
setwd(paste(getwd(), "/test", sep=""))
plot(pressure)
text(150, 600,
"Pressure (mm Hg)\nversus\nTemperature (Celsius)")
dev.off()
library(ggplot2)
data(chem97, package = "mlmRev")
install.packages("mlmRev")
data(chem97, package = "mlmRev")
data(Chem97, package = "mlmRev")
pg <- ggplot(Chem97, aes(gcsescore)) + geom_histogram(binwidth = 0.5) + facet_wrap(-score)
pg <- ggplot(Chem97, aes(gcsescore)) + geom_histogram(binwidth = 0.5) + facet_wrap(~score)
print(pg)
pg <- ggplot(Chem97, aes(gcsescore)) + stat_density(geom = "path", position="identity") + facet_wrap(~score)
print(pg)
pg <- ggplot(Chem97, aes(gcsescore)) + stat_density(geom = "path",position = "identity", aes(colour = factor(score)))
print(pg)
?plot
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
points(x, cex = .5, col = "dark red")
set.seed (1)
m <- 1000
n <- 500
A <- matrix {runif {m*n}, m, n}
A <- matrix {runif (m*n), m, n}
A <- matrix (runif (m*n), m, n)
system.time (B <- crossprod(A))
A <- matrix (runif (m*n), m, n)
system.time (B <- crossprod(A))
version
system.time (B <- crossprod(A))
source('~/Documents/workspace/R/UTFSmoother.R')
## smoothed test
u <- ukf.smooth (
series.r, sine.f.xx, sine.f.xy,
Nx = 1e-3 * diag(c(1/3, 1, 1/10, 1/10)),
Ny = 1,
Xo = c(0.10, 0.10, 1, 1e-3), alpha=1e-2)
data <- rbind (
data.frame(t = 1:500, y=series.r, type='raw', window='Price'),
data.frame(t = 1:500, y=u$Yhat, type='filtered', window='Price'),
data.frame(t = 1:500, y=u$Xhat[,3], type='amp', window='Params'))
ggplot() + geom_line(aes(x=t,y=y, colour=type), data) + facet_grid(window ~ ., scales="free_y", heights=c(3,2))
debug(unscented.transform.aug)
source('~/Documents/workspace/R/Quantitivity.R')
install.packages('vars')
install.packages('tawny')
source('~/Documents/workspace/R/Quantitivity.R')
version
update
packages.update()
update.packages()
update.packages()
version()
source('~/Documents/workspace/R/Quantitivity.R')
update.packages(checkBuilt=TRUE, ask=FALSE)
install.packages("quantmod")
require('quantmod')
getSymbols('QQQQ',src='yahoo')
getSymbols('QQQQ',src='yahoo')
setSymbolLookup(QQQQ='yahoo')
getSymbols('QQQQ',src='yahoo')
getSymbols('QQQQ')
